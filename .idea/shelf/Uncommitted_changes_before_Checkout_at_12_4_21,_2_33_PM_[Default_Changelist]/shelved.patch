Index: app/src/main/java/com/team9/smartpocd/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.team9.smartpocd;\n\n//import android.support.annotation.NonNull;\n//import android.support.v4.app.ActivityCompat;\n//import android.support.v7.app.AppCompatActivity;\nimport androidx.annotation.NonNull;\nimport androidx.core.app.ActivityCompat;\n//import androidx.core.content.ContextCompat;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.google.firebase.storage.FirebaseStorage;\nimport com.google.firebase.storage.StorageReference;\nimport com.google.firebase.storage.UploadTask;\n\nimport android.Manifest;\nimport android.annotation.SuppressLint;\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.graphics.Bitmap;\nimport android.graphics.ImageFormat;\nimport android.graphics.Matrix;\nimport android.graphics.Rect;\nimport android.graphics.SurfaceTexture;\nimport android.hardware.camera2.CameraAccessException;\nimport android.hardware.camera2.CameraCaptureSession;\nimport android.hardware.camera2.CameraCharacteristics;\nimport android.hardware.camera2.CameraDevice;\nimport android.hardware.camera2.CameraManager;\nimport android.hardware.camera2.CameraMetadata;\nimport android.hardware.camera2.CaptureRequest;\nimport android.hardware.camera2.TotalCaptureResult;\nimport android.hardware.camera2.params.MeteringRectangle;\nimport android.hardware.camera2.params.StreamConfigurationMap;\nimport android.media.Image;\nimport android.media.ImageReader;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.os.Handler;\nimport android.os.HandlerThread;\nimport android.renderscript.Allocation;\nimport android.renderscript.Element;\nimport android.renderscript.RenderScript;\nimport android.renderscript.ScriptIntrinsicYuvToRGB;\nimport android.util.Log;\nimport android.util.Size;\nimport android.util.SparseIntArray;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.MotionEvent;\nimport android.view.Surface;\nimport android.view.TextureView;\nimport android.view.View;\nimport android.webkit.MimeTypeMap;\nimport android.widget.Button;\nimport android.widget.SeekBar;\nimport android.widget.Switch;\nimport android.widget.TextView;\nimport android.widget.Toast;\nimport android.widget.ZoomControls;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.ByteBuffer;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\n\n// for ML Model\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.InputStreamReader;\nimport okhttp3.MediaType;\nimport okhttp3.MultipartBody;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;\n\n\n/**\n * MainActivity Class\n */\npublic class MainActivity extends AppCompatActivity\n{\n    /** Constants */\n    /* TAG for logging */\n    public static final String TAG = \"MainActivity\";\n    /* Media storage directory file */\n    public static final File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory (Environment.DIRECTORY_PICTURES), \"MyPictures\");\n    /* Request code for camera permission */\n    public static final int REQUEST_CAMERA_PERMISSION = 200;\n    private StorageReference storageReference;\n    public UploadTask uploadTask;\n    /* Orientations */\n\n    private static final int SENSOR_ORIENTATION_DEFAULT_DEGREES = 90;\n    private static final int SENSOR_ORIENTATION_INVERSE_DEGREES = 270;\n    public static final SparseIntArray DEFAULT_ORIENTATIONS = new SparseIntArray();\n    public static final SparseIntArray INVERSE_ORIENTATIONS = new SparseIntArray();\n    static {\n        DEFAULT_ORIENTATIONS.append(Surface.ROTATION_0, 90);\n        DEFAULT_ORIENTATIONS.append(Surface.ROTATION_90, 0);\n        DEFAULT_ORIENTATIONS.append(Surface.ROTATION_180, 270);\n        DEFAULT_ORIENTATIONS.append(Surface.ROTATION_270, 180);\n    }\n    static {\n        INVERSE_ORIENTATIONS.append(Surface.ROTATION_0, 270);\n        INVERSE_ORIENTATIONS.append(Surface.ROTATION_90, 180);\n        INVERSE_ORIENTATIONS.append(Surface.ROTATION_180, 90);\n        INVERSE_ORIENTATIONS.append(Surface.ROTATION_270, 0);\n    }\n    private Switch focusSwitch;\n    private boolean autoFocus;\n    private View.OnTouchListener focusListner = new View.OnTouchListener() {\n        @SuppressLint(\"DefaultLocale\")\n        @Override\n        public boolean onTouch(View v, MotionEvent event) {\n            if (!autoFocus) {\n                int cx = (int)event.getX();\n                int cy = (int)event.getY();\n\n                Rect rect = new Rect(Math.max(cx - 50, 0), Math.max(cy - 50, 0), Math.min(cx + 50, v.getWidth()), Math.min(cy + 50, v.getHeight()));\n                focusArea = new MeteringRectangle[]{new MeteringRectangle(rect, MeteringRectangle.METERING_WEIGHT_DONT_CARE)};\n\n                updatePreview();\n            }\n            return true;\n        }\n    };\n    private MeteringRectangle[] focusArea;\n\n    static int getOrientation(int sensorOrientation, int displayRotation) {\n        int degree = DEFAULT_ORIENTATIONS.get(displayRotation);\n        switch (sensorOrientation) {\n            case SENSOR_ORIENTATION_DEFAULT_DEGREES:\n                degree = DEFAULT_ORIENTATIONS.get(displayRotation);\n                break;\n            case SENSOR_ORIENTATION_INVERSE_DEGREES:\n                degree = INVERSE_ORIENTATIONS.get(displayRotation);\n                break;\n        }\n        return degree;\n    }\n\n    /** Components */\n    /* Camera device */\n    protected CameraDevice cameraDevice;\n    /* Capture session */\n    protected CameraCaptureSession cameraCaptureSessions;\n    /* Builder for capture request */\n    protected CaptureRequest.Builder captureRequestBuilder;\n    /* Zoom control */\n    protected CameraZoom cameraZoom;\n    /* Texture view for previewing */\n    protected TextureView textureView;\n\n    /** Properties */\n    /* Image size */\n    protected Size imageDimension;\n    /* Zoom step */\n    protected float zoomStep = 1.0f;\n    /* Factor value of current zoom */\n    protected float zoomFactor = CameraZoom.DEFAULT_ZOOM_FACTOR;\n\n    /** Internals */\n    private File imageFile;\n    private Handler backgroundHandler;\n    private HandlerThread backgroundThread;\n\n    /** Create a texture listener for surface texture */\n    private final TextureView.SurfaceTextureListener textureListener = new TextureView.SurfaceTextureListener() {\n        @Override\n        public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {\n            openCamera();\n        }\n\n        @Override\n        public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {\n\n        }\n\n        @Override\n        public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {\n            return false;\n        }\n\n        @Override\n        public void onSurfaceTextureUpdated(SurfaceTexture surface) {\n\n        }\n    };\n\n    /** Create a state callback for camera device */\n    private final CameraDevice.StateCallback stateCallback = new CameraDevice.StateCallback() {\n        @Override\n        public void onOpened(@NonNull CameraDevice camera) {\n            Log.e(TAG, \"onOpened\");\n\n            cameraDevice = camera;\n            createCameraPreview();\n        }\n\n        @Override\n        public void onDisconnected(@NonNull CameraDevice camera) {\n            cameraDevice.close();\n\n            Log.e(TAG, \"onDisconnected\");\n        }\n\n        @Override\n        public void onError(@NonNull CameraDevice camera, int error) {\n            cameraDevice.close();\n            cameraDevice = null;\n        }\n    };\n\n    /** onCreate() override */\n    @Override\n    protected void onCreate(Bundle savedInstanceState)\n    {\n        // Initialize the widgets\n        super.onCreate(savedInstanceState);\n        storageReference = FirebaseStorage.getInstance().getReference();\n        setContentView(R.layout.activity_main);\n        textureView = findViewById(R.id.texture);\n        assert textureView != null;\n        ////\n        textureView.setOnTouchListener(focusListner);\n        focusSwitch = findViewById(R.id.switchFocus);\n        focusSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> autoFocus = isChecked);\n        ////\n        Button takePictureButton = findViewById(R.id.btn_capture);\n        assert takePictureButton != null;\n        takePictureButton.setOnClickListener(v -> takePicture());\n        Button galleryButton = findViewById(R.id.btn_gallery);\n        assert galleryButton != null;\n        galleryButton.setOnClickListener(v -> showGallery());\n        ZoomControls zoomControls = findViewById(R.id.zoomControls);\n        assert zoomControls != null;\n        zoomControls.setOnZoomInClickListener(v -> zoomIn());\n        zoomControls.setOnZoomOutClickListener(v -> zoomOut());\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.main_menu, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if (item.getItemId() == R.id.zoomStepMenu) {\n            final Dialog zoomStepDlg = new Dialog(MainActivity.this);\n            zoomStepDlg.setContentView(R.layout.zoom_step_dialog);\n            zoomStepDlg.setTitle(\"Zoom step\");\n            TextView zoomStepText = zoomStepDlg.findViewById(R.id.txtZoomStep);\n            final String[] currZoomStepText = {\"Zoom step: \" + zoomStep};\n            zoomStepText.setText(currZoomStepText[0]);\n            SeekBar stepSeeker = zoomStepDlg.findViewById(R.id.seekerZoomStep);\n            stepSeeker.setProgress((int)(zoomStep * 10));\n            stepSeeker.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n                @Override\n                public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n                    zoomStep = progress / 10.f;\n                    currZoomStepText[0] = \"Zoom step: \" + zoomStep;\n                    zoomStepText.setText(currZoomStepText[0]);\n                }\n\n                @Override\n                public void onStartTrackingTouch(SeekBar seekBar) {\n\n                }\n\n                @Override\n                public void onStopTrackingTouch(SeekBar seekBar) {\n\n                }\n            });\n\n            Button okButton = zoomStepDlg.findViewById(R.id.btnOK);\n            okButton.setOnClickListener(v -> zoomStepDlg.dismiss());\n\n            zoomStepDlg.show();\n            return true;\n        } else {\n            return super.onOptionsItemSelected(item);\n        }\n    }\n\n    /** onRequestPermissionsResult() override */\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        if (requestCode == REQUEST_CAMERA_PERMISSION) {\n            if (grantResults[0] == PackageManager.PERMISSION_DENIED) {\n                Toast.makeText(MainActivity.this, \"Sorry!!!, you can't use this app without granting permission\", Toast.LENGTH_LONG).show();\n                finish();\n            }\n        }\n    }\n\n    /** onResume() override */\n    @Override\n    protected void onResume() {\n        super.onResume();\n        Log.e(TAG, \"onResume\");\n\n        startBackgroundThread();\n        if (textureView.isAvailable()) {\n            openCamera();\n        } else {\n            textureView.setSurfaceTextureListener(textureListener);\n        }\n    }\n\n    /** onPause() override */\n    @Override\n    protected void onPause() {\n        Log.e(TAG, \"onPause\");\n\n        stopBackgroundThread();\n        super.onPause();\n    }\n\n    /** Start up the background thread */\n    private void startBackgroundThread() {\n        backgroundThread = new HandlerThread(\"Camera Background\");\n        backgroundThread.start();\n        backgroundHandler = new Handler(backgroundThread.getLooper());\n    }\n\n    /** Stop the background thread */\n    private void stopBackgroundThread() {\n        backgroundThread.quitSafely();\n        try {\n            backgroundThread.join();\n            backgroundThread = null;\n            backgroundHandler = null;\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Return true if the given array contains the given integer */\n    private static boolean contains(int[] modes, int mode) {\n        if (modes == null) {\n            return false;\n        }\n        for (int i : modes) {\n            if (i == mode) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Open a default camera */\n    private void openCamera() {\n        Log.e(TAG, \"-> camera open\");\n\n        CameraManager manager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);\n        assert manager != null;\n\n        try {\n            // Ready for opening\n            String cameraId = manager.getCameraIdList()[0];\n            CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);\n\n            if (!contains(characteristics.get(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES), CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_RAW)) {\n                Log.e(TAG, \"Not supported RAW image format.\");\n                //Boast.makeText(MainActivity.this, \"Not supported RAW format on this camera.\").show();\n                return;\n            }\n\n            cameraZoom = new CameraZoom(characteristics);\n\n            StreamConfigurationMap map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);\n            assert map != null;\n\n            SortedSet<OrderedSize> imageSizes = new TreeSet<>();\n\n                    //for (Size size : map.getOutputSizes(SurfaceTexture.class))\n                    for (Size size : map.getOutputSizes(ImageFormat.YUV_420_888))\n                    {\n                        OrderedSize s = new OrderedSize(size.getWidth(), size.getHeight());\n                        imageSizes.add(s);\n                    }\n\n\n            imageDimension = new Size(imageSizes.last().getWidth(), imageSizes.last().getHeight());\n\n            // Add permission for camera and let user grant the permission\n            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_CAMERA_PERMISSION);\n                return;\n            }\n\n            // Open camera by id\n            manager.openCamera(cameraId, stateCallback, null);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n\n        Log.e(TAG, \"<- camera open\");\n    }\n\n    /** Create a camera preview */\n    private void createCameraPreview() {\n        Log.e(TAG, \"-> camera preview create\");\n\n        try {\n            SurfaceTexture texture = textureView.getSurfaceTexture();\n            assert texture != null;\n            texture.setDefaultBufferSize(imageDimension.getWidth(), imageDimension.getHeight());\n\n            Surface surface = new Surface(texture);\n            captureRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);\n            captureRequestBuilder.addTarget(surface);\n\n            cameraDevice.createCaptureSession(Collections.singletonList(surface), new CameraCaptureSession.StateCallback() {\n                @Override\n                public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {\n                    //The camera is already closed\n                    if (null == cameraDevice) {\n                        return;\n                    }\n                    // When the session is ready, we start displaying the preview.\n                    cameraCaptureSessions = cameraCaptureSession;\n                    cameraZoom.setZoom(captureRequestBuilder, zoomFactor);\n                    updatePreview();\n                }\n\n                @Override\n                public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {\n                    Toast.makeText(MainActivity.this, \"Configuration change\", Toast.LENGTH_SHORT).show();\n                }\n            }, null);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n\n        Log.e(TAG, \"<- camera preview create\");\n    }\n\n    /** Update the camera preview */\n    private void updatePreview() {\n        Log.e(TAG, \"-> camera preview update\");\n\n        if (null == cameraDevice) {\n            Log.e(TAG, \"Failed to update the preview error, camera device is null.\");\n            return;\n        }\n        if (autoFocus) {\n            captureRequestBuilder.set(CaptureRequest.CONTROL_AF_REGIONS, null);\n            captureRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE, CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);\n        } else {\n            captureRequestBuilder.set(CaptureRequest.CONTROL_AF_REGIONS, focusArea);\n            captureRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE, CameraMetadata.CONTROL_AF_MODE_AUTO);\n            captureRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER, CameraMetadata.CONTROL_AF_TRIGGER_START);\n\n        }\n\n        try {\n            cameraCaptureSessions.setRepeatingRequest(captureRequestBuilder.build(), null, backgroundHandler);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n\n        Log.e(TAG, \"<- camera preview update\");\n    }\n\n    /** Take the picture from camera device */\n    private void takePicture() {\n        Log.e(TAG, \"-> still picture take\");\n\n        if (null == cameraDevice) {\n            Log.e(TAG, \"Failed to take the picture, camera device is null.\");\n            return;\n        }\n\n        CameraManager manager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);\n        assert manager != null;\n\n        try {\n            CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraDevice.getId());\n            StreamConfigurationMap map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);\n            assert map != null;\n\n            Integer sensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);\n            if (sensorOrientation == null) {\n                sensorOrientation = 90;\n            }\n\n            SortedSet<OrderedSize> imageSizes = new TreeSet<>();\n            for (Size size : map.getOutputSizes(ImageFormat.YUV_420_888))\n            {\n                OrderedSize s = new OrderedSize(size.getWidth(), size.getHeight());\n                imageSizes.add(s);\n            }\n\n\n            ImageReader reader;\n            // The largest image size for high quality\n            int width = imageSizes.last().getWidth();\n            int height = imageSizes.last().getHeight();\n            reader = ImageReader.newInstance(width, height, ImageFormat.YUV_420_888, 2);\n\n\n            List<Surface> outputSurfaces = new ArrayList<>(2);\n            outputSurfaces.add(reader.getSurface());\n            outputSurfaces.add(new Surface(textureView.getSurfaceTexture()));\n            final CaptureRequest.Builder captureBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);\n            captureBuilder.addTarget(reader.getSurface());\n\n            // Best quality for JPEG format\n//            if (x == 1) {\n//                captureBuilder.set(CaptureRequest.JPEG_QUALITY, (byte) 100);\n//            }\n\n            // For auto-focus\n            captureBuilder.set(CaptureRequest.CONTROL_AF_MODE, CaptureRequest.CONTROL_AF_MODE_AUTO);\n            // For zoomed picture taking\n            captureBuilder.set(CaptureRequest.SCALER_CROP_REGION, cameraZoom.getCropRect());\n            // For long exposure time\n            captureBuilder.set(CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_OFF); // For long exposure time, this is needed to disabled the default value\n            captureBuilder.set(CaptureRequest.SENSOR_EXPOSURE_TIME, (long) 1e9 / 5);\n\n            // Orientation\n            int rotation = getWindowManager().getDefaultDisplay().getRotation();\n            rotation = getOrientation(sensorOrientation, rotation);\n            //captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, rotation);\n\n            imageFile = getOutputImageFile();\n            assert imageFile != null;\n            ImageReader.OnImageAvailableListener readerListener;\n            int finalRotation = rotation;\n            readerListener = new ImageReader.OnImageAvailableListener()\n            {\n\n                @Override\n                public void onImageAvailable(ImageReader reader)\n                {\n\n                    try (Image image = reader.acquireLatestImage()) {\n                        final ByteBuffer yuvBytes = this.imageToByteBuffer(image);\n\n                        // Convert YUV to RGB\n                        final RenderScript rs = RenderScript.create(MainActivity.this);\n                        final Bitmap bitmap = Bitmap.createBitmap(image.getWidth(), image.getHeight(), Bitmap.Config.ARGB_8888);\n                        final Allocation allocationRgb = Allocation.createFromBitmap(rs, bitmap);\n\n                        final Allocation allocationYuv = Allocation.createSized(rs, Element.U8(rs), yuvBytes.array().length);\n                        allocationYuv.copyFrom(yuvBytes.array());\n\n                        ScriptIntrinsicYuvToRGB scriptYuvToRgb = ScriptIntrinsicYuvToRGB.create(rs, Element.U8_4(rs));\n                        scriptYuvToRgb.setInput(allocationYuv);\n                        scriptYuvToRgb.forEach(allocationRgb);\n\n                        allocationRgb.copyTo(bitmap);\n                        save(bitmap);\n                        notifyToGallery();\n\n                        // Release\n                        bitmap.recycle();\n                        allocationYuv.destroy();\n                        allocationRgb.destroy();\n                        rs.destroy();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                /**\n                 * Notify system to scan new media file\n                 * This will prevent from showing image on gallery only when restarted.\n                 */\n                private void notifyToGallery() {\n                    Intent i = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\n                    i.setData(Uri.fromFile(imageFile));\n                    sendBroadcast(i);\n                }\n\n                /* Convert the YUV image to ARGB bitmap */\n                private ByteBuffer imageToByteBuffer(final Image image) {\n                    final Rect crop = image.getCropRect();\n                    final int width = crop.width();\n                    final int height = crop.height();\n\n                    final Image.Plane[] planes = image.getPlanes();\n                    final byte[] rowData = new byte[planes[0].getRowStride()];\n                    final int bufferSize = width * height * ImageFormat.getBitsPerPixel(ImageFormat.YUV_420_888) / 8;\n                    final ByteBuffer output = ByteBuffer.allocateDirect(bufferSize);\n\n                    int channelOffset = 0;\n                    int outputStride = 0;\n\n                    for (int planeIndex = 0; planeIndex < 3; planeIndex++) {\n                        if (planeIndex == 0) {\n                            channelOffset = 0;\n                            outputStride = 1;\n                        } else if (planeIndex == 1) {\n                            channelOffset = width * height + 1;\n                            outputStride = 2;\n                        } else if (planeIndex == 2) {\n                            channelOffset = width * height;\n                            outputStride = 2;\n                        }\n\n                        final ByteBuffer buffer = planes[planeIndex].getBuffer();\n                        final int rowStride = planes[planeIndex].getRowStride();\n                        final int pixelStride = planes[planeIndex].getPixelStride();\n\n                        final int shift = (planeIndex == 0) ? 0 : 1;\n                        final int widthShifted = width >> shift;\n                        final int heightShifted = height >> shift;\n\n                        buffer.position(rowStride * (crop.top >> shift) + pixelStride * (crop.left >> shift));\n\n                        for (int row = 0; row < heightShifted; row++) {\n                            final int length;\n\n                            if (pixelStride == 1 && outputStride == 1) {\n                                length = widthShifted;\n                                buffer.get(output.array(), channelOffset, length);\n                                channelOffset += length;\n                            } else {\n                                length = (widthShifted - 1) * pixelStride + 1;\n                                buffer.get(rowData, 0, length);\n\n                                for (int col = 0; col < widthShifted; col++) {\n                                    output.array()[channelOffset] = rowData[col * pixelStride];\n                                    channelOffset += outputStride;\n                                }\n                            }\n\n                            if (row < heightShifted - 1) {\n                                buffer.position(buffer.position() + rowStride - length);\n                            }\n                        }\n                    }\n\n                    return output;\n                }\n\n                /* Save the image with PNG format */\n                private void save(Bitmap originalBitmap) throws IOException\n                {\n                    OutputStream output = null;\n                    try {\n                        Bitmap rotatedBitmap = rotateImage(originalBitmap, finalRotation);\n                        output = new FileOutputStream(imageFile);\n                        rotatedBitmap.compress(Bitmap.CompressFormat.PNG, 100, output);\n                        output.flush();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    } finally {\n                        if (null != output) {\n                            output.close();\n                        }\n                    }\n                }\n\n                /* Rotate the image by degree */\n                private Bitmap rotateImage(Bitmap source, float degree) {\n                    Matrix matrix = new Matrix();\n                    matrix.postRotate(degree);\n                    return Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(), matrix, true);\n                }\n            };\n\n            reader.setOnImageAvailableListener(readerListener, backgroundHandler);\n            final CameraCaptureSession.CaptureCallback captureListener = new CameraCaptureSession.CaptureCallback() {\n                @Override\n                public void onCaptureCompleted(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request, @NonNull TotalCaptureResult result) {\n                    super.onCaptureCompleted(session, request, result);\n                    Boast.makeText(MainActivity.this, \"Saved:\" + imageFile.getAbsolutePath(), Toast.LENGTH_SHORT).show();\n                    Uri file = Uri.fromFile(new File(imageFile.getAbsolutePath()));\n                    StorageReference riversRef = storageReference.child(file.getLastPathSegment());\n                    uploadTask = riversRef.putFile(file);\n\n                    sendToMLmodel();\n\n                    createCameraPreview();\n                }\n            };\n\n            cameraDevice.createCaptureSession(outputSurfaces, new CameraCaptureSession.StateCallback() {\n                @Override\n                public void onConfigured(@NonNull CameraCaptureSession session) {\n                    try {\n                        session.capture(captureBuilder.build(), captureListener, backgroundHandler);\n                    } catch (CameraAccessException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n                @Override\n                public void onConfigureFailed(@NonNull CameraCaptureSession session) {\n                }\n            }, backgroundHandler);\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n\n        Log.e(TAG, \"<- still picture take\");\n    }\n\n    /** Show the phone gallery */\n    private void showGallery() {\n        Intent intent = new Intent(this, GalleryActivity.class);\n        startActivity(intent);\n    }\n\n    /** Zoom in the preview */\n    private void zoomIn() {\n        zoomFactor += zoomStep;\n        if (zoomFactor >= cameraZoom.maxZoom) {\n            zoomFactor = cameraZoom.maxZoom;\n        }\n\n        cameraZoom.setZoom(captureRequestBuilder, zoomFactor);\n        updatePreview();\n        Boast.makeText(MainActivity.this, \"Zoom In: \" + zoomFactor, Toast.LENGTH_SHORT).show();\n    }\n\n    /** Zoom out the preview */\n    protected void zoomOut() {\n        zoomFactor -= zoomStep;\n        if (zoomFactor <= CameraZoom.DEFAULT_ZOOM_FACTOR) {\n            zoomFactor = CameraZoom.DEFAULT_ZOOM_FACTOR;\n        }\n\n        cameraZoom.setZoom(captureRequestBuilder, zoomFactor);\n        updatePreview();\n        Boast.makeText(MainActivity.this, \"Zoom Out: \" + zoomFactor, Toast.LENGTH_SHORT).show();\n    }\n\n    /** Retrieve the output image file */\n    private static File getOutputImageFile()\n    {\n        if (!mediaStorageDir.exists()) {\n            if (!mediaStorageDir.mkdirs()) {\n                Log.d(\"MyPictures\", \"Failed to create directory\"); //if there is no directory, this is the error\n                return null;\n            }\n        }\n        // Create a image file name\n        @SuppressLint(\"SimpleDateFormat\") String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n        return new File(mediaStorageDir.getPath() + File.separator + \"IMG_\"+ timeStamp + \".png\");\n    }\n\n    private void sendToMLmodel(){\n        String file_path = imageFile.getAbsolutePath();\n        OkHttpClient client = new OkHttpClient();\n        // get content type\n        String extension = MimeTypeMap.getFileExtensionFromUrl(imageFile.getPath());\n        String content_type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension); // should be \"image/png\"\n        // create post request\n        //RequestBody file_body = RequestBody.create(imageFile, MediaType.parse(content_type));\n        RequestBody file_body = RequestBody.create(imageFile, MediaType.parse(content_type));\n        RequestBody request_body = new MultipartBody.Builder()\n                .setType(MultipartBody.FORM)\n                .addFormDataPart(\"type\", content_type)\n                .addFormDataPart(\"uploaded_image\", file_path.substring(file_path.lastIndexOf(\"/\")+1), file_body)\n                .build();\n        Request request = new Request.Builder()\n                .url(\"http://34.71.197.154:8080/predictions/fastunet/\")\n                .post(request_body)\n                .build();\n\n        try {\n            Response response = client.newCall(request).execute();\n            if(!response.isSuccessful()){\n                throw new IOException(\"Error : \"+response);\n            } else {\n                //Boast.makeText(MainActivity.this, response.body().string(), Toast.LENGTH_SHORT).show();\n                String responseText = response.body().string();\n                System.out.println(responseText);\n            }\n\n        } catch (IOException e){\n            e.printStackTrace();\n        }\n\n       /* // setup request\n        HttpURLConnection torchServeHttpConnection = null;\n        URL torchServeURL = new URL(\"http://34.71.197.154:8080/predictions/fastunet/\");\n        torchServeHttpConnection = (HttpURLConnection)torchServeURL.openConnection();\n\n        torchServeHttpConnection.setRequestMethod(\"POST\");\n        torchServeHttpConnection.setRequestProperty(\"Content-Type\", \"image/png\");\n        torchServeHttpConnection.setDoOutput(true);\n        torchServeHttpConnection.setDoInput(true);\n        torchServeHttpConnection.setAllowUserInteraction(true);\n\n        torchServeHttpConnection.connect();\n\n        FileOutputStream fos = new FileOutputStream(imageFile);\n        //OutputStreamWriter osw = new OutputStreamWriter(torchServeHttpConnection.getOutputStream());\n*/\n\n    /*\n        // example of notation: /storage/emulated/0/Pictures/MyPictures/imageName.png\n      // try  \"\\\"/storage/emulated/0/Pictures/MyPictures/imageName.png\\\"\"\n        String imagePath = \"\\\"@\" + imageFile.getPath().toString() + \"\\\"\";\n        String[] commands = new String[] {\"curl\", \"-X\", \"POST\", \"-H\", \"\\\"Content-Type: image/png\\\"\",\n                \"--data-binary\",\n                imagePath,\n                \"http://34.71.197.154:8080/predictions/fastunet/\"};\n        Process process = Runtime.getRuntime().exec(commands);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line;\n        String response = \"\";\n        while ((line = reader.readLine()) != null) {\n            response += line;\n        }\n        System.out.println(response);\n        Boast.makeText(MainActivity.this, response, Toast.LENGTH_SHORT).show();\n        */\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/team9/smartpocd/MainActivity.java b/app/src/main/java/com/team9/smartpocd/MainActivity.java
--- a/app/src/main/java/com/team9/smartpocd/MainActivity.java	
+++ b/app/src/main/java/com/team9/smartpocd/MainActivity.java	
@@ -404,7 +404,8 @@
                     }
 
 
-            imageDimension = new Size(imageSizes.last().getWidth(), imageSizes.last().getHeight());
+            //imageDimension = new Size(imageSizes.last().getWidth(), imageSizes.last().getHeight());
+            imageDimension = new Size(imageSizes.first().getWidth(), imageSizes.last().getHeight());
 
             // Add permission for camera and let user grant the permission
             if (ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
@@ -694,8 +695,6 @@
                     StorageReference riversRef = storageReference.child(file.getLastPathSegment());
                     uploadTask = riversRef.putFile(file);
 
-                    sendToMLmodel();
-
                     createCameraPreview();
                 }
             };
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AndroidLayouts\">\n    <shared>\n      <config />\n    </shared>\n  </component>\n  <component name=\"AndroidLogFilters\">\n    <option name=\"TOOL_WINDOW_CUSTOM_FILTER\" value=\"curl\" />\n    <option name=\"TOOL_WINDOW_LOG_LEVEL\" value=\"error\" />\n    <option name=\"TOOL_WINDOW_CONFIGURED_FILTER\" value=\"Show only selected application\" />\n  </component>\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"NONE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"d8d99a79-f6e8-4620-aa53-aa3da3a00d29\" name=\"Default Changelist\" comment=\"Added function sendToMLmodel in MainActivity (not working)\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/jarRepositories.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/jarRepositories.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/modules/app/My_Application.app.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/modules/app/My_Application.app.iml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/build.gradle\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/build.gradle\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/AndroidManifest.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/AndroidManifest.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/team9/smartpocd/MainActivity.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/team9/smartpocd/MainActivity.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"device_and_snapshot_combo_box_target[988ed83749344a4d5a]\" />\n  <component name=\"ExternalProjectsData\">\n    <projectState path=\"$PROJECT_DIR$\">\n      <ProjectState />\n    </projectState>\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"firebase_ML_backend_integration\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectId\" id=\"21758NsUnkCrffL2hmsuSxrgDbn\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/app\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/app\" />\n      <recent name=\"$PROJECT_DIR$/gradle\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"app\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\" activateToolWindowBeforeRun=\"false\">\n      <module name=\"My_Application.app\" />\n      <option name=\"DEPLOY\" value=\"true\" />\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\n      <option name=\"ALL_USERS\" value=\"false\" />\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\n      <option name=\"MODE\" value=\"default_activity\" />\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\n      <option name=\"SKIP_NOOP_APK_INSTALLATIONS\" value=\"true\" />\n      <option name=\"FORCE_STOP_RUNNING_APP\" value=\"true\" />\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\n      <Auto>\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\n        <option name=\"WORKING_DIR\" value=\"\" />\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\n      </Auto>\n      <Hybrid>\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\n        <option name=\"WORKING_DIR\" value=\"\" />\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\n      </Hybrid>\n      <Java />\n      <Native>\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\n        <option name=\"WORKING_DIR\" value=\"\" />\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\n      </Native>\n      <Profilers>\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Sample Java Methods\" />\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\n      </Profilers>\n      <option name=\"DEEP_LINK\" value=\"\" />\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\n      <method v=\"2\">\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"d8d99a79-f6e8-4620-aa53-aa3da3a00d29\" name=\"Default Changelist\" comment=\"\" />\n      <created>1637279125077</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1637279125077</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Synced new Firebase on top of ML Google Cloud\">\n      <created>1637681577420</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1637681577420</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Added function sendToMLmodel in MainActivity (not working)\">\n      <created>1638250840026</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1638250840026</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Updated package name\" />\n    <MESSAGE value=\"Synced new Firebase on top of ML Google Cloud\" />\n    <MESSAGE value=\"Added function sendToMLmodel in MainActivity (not working)\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Added function sendToMLmodel in MainActivity (not working)\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -14,12 +14,10 @@
     <option name="autoReloadType" value="NONE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="d8d99a79-f6e8-4620-aa53-aa3da3a00d29" name="Default Changelist" comment="Added function sendToMLmodel in MainActivity (not working)">
-      <change beforePath="$PROJECT_DIR$/.idea/jarRepositories.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/jarRepositories.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/modules/app/My_Application.app.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/modules/app/My_Application.app.iml" afterDir="false" />
+    <list default="true" id="d8d99a79-f6e8-4620-aa53-aa3da3a00d29" name="Default Changelist" comment="httpOK attempt">
+      <change beforePath="$PROJECT_DIR$/.idea/deploymentTargetDropDown.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/deploymentTargetDropDown.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/app/build.gradle" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/team9/smartpocd/MainActivity.java" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/team9/smartpocd/MainActivity.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -27,7 +25,7 @@
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
-  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[988ed83749344a4d5a]" />
+  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[/home/daniel/.android/avd/Pixel_3a_API_30_x86.avd]" />
   <component name="ExternalProjectsData">
     <projectState path="$PROJECT_DIR$">
       <ProjectState />
@@ -147,7 +145,14 @@
       <option name="project" value="LOCAL" />
       <updated>1638250840026</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="httpOK attempt">
+      <created>1638338052860</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1638338052860</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -166,6 +171,7 @@
     <MESSAGE value="Updated package name" />
     <MESSAGE value="Synced new Firebase on top of ML Google Cloud" />
     <MESSAGE value="Added function sendToMLmodel in MainActivity (not working)" />
-    <option name="LAST_COMMIT_MESSAGE" value="Added function sendToMLmodel in MainActivity (not working)" />
+    <MESSAGE value="httpOK attempt" />
+    <option name="LAST_COMMIT_MESSAGE" value="httpOK attempt" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,5 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="DesignSurface">
+    <option name="filePathToZoomLevelMap">
+      <map>
+        <entry key="app/src/main/res/layout/activity_mainprev.xml" value="0.25" />
+      </map>
+    </option>
+  </component>
   <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <targetSelectedWithDropDown>\n      <Target>\n        <type value=\"QUICK_BOOT_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\n            <value value=\"$USER_HOME$/.android/avd/Samsung_Galaxy_S8_API_27.avd\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </targetSelectedWithDropDown>\n    <timeTargetWasSelectedWithDropDown value=\"2021-11-19T00:25:35.095700Z\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	
+++ b/.idea/deploymentTargetDropDown.xml	
@@ -7,11 +7,11 @@
         <deviceKey>
           <Key>
             <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="$USER_HOME$/.android/avd/Samsung_Galaxy_S8_API_27.avd" />
+            <value value="$USER_HOME$/.android/avd/Pixel_3a_API_30_x86.avd" />
           </Key>
         </deviceKey>
       </Target>
     </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2021-11-19T00:25:35.095700Z" />
+    <timeTargetWasSelectedWithDropDown value="2021-12-02T21:51:10.390623Z" />
   </component>
 </project>
\ No newline at end of file
